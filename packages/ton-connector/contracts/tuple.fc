#include "stdlib.fc";
#include "constants.fc";

(int) tlen (tuple t) asm "TLEN";
forall X -> (tuple, X) ~tpop (tuple t) asm "TPOP";

(tuple)sort(tuple vec) {
    tuple res = empty_tuple();

    repeat (vec.tlen()) {
        tuple tmp = empty_tuple();
        int min_elt = vec~tpop();

        while (vec.tlen() > 0) {
            (min_elt, int b) = minmax(min_elt, vec~tpop());

            tmp~tpush(b);
        }

        res~tpush(min_elt);
        vec = tmp;
    }

    return res;
}

(int)median(tuple vec) {
    int n = vec.tlen();

    throw_unless(ERR_TUPLE_EMPTY, n > 0);

    if(n == 1) {
        return vec.first();
    } else {
        var (q, r) = (n / 2, n % 2);
        tuple sorted = vec.sort();

        if (r == 1) {
            return sorted.at(q);
        } else {
            return (sorted.at(q) + sorted.at(q - 1)) / 2;
        }
    }
}