#include "stdlib.fc";
#include "utils.fc";

(int) load_data() impure {
    var ds = get_data().begin_parse();
    if(slice_empty?(ds)) {
        return (0);
    }

    return (ds~load_uint(256));
}

() save_data(int value) impure inline {
    set_data(begin_cell()
            .store_uint(value, 256)
            .end_cell());
}

() recv_internal(int balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);
    slice adapter_address = "EQCVOmfS4pRtGopmgWAke4S8btRBaBN19a58goTlDD-2guxX"a;

    if (op == 1) {
        send_message(101, adapter_address, begin_cell().store_uint(333, 256));

        return ();
    }

    if (op == 101) {
        var cs = in_msg_full.begin_parse();
        var flags = cs~load_uint(4);
        slice s_addr = cs~load_msg_addr();

        ~dump(adapter_address);
        ~dump(s_addr);

        throw_unless(359, parse_work_addr(adapter_address) == parse_work_addr(s_addr));

        int value = in_msg_body~load_uint(256);

        save_data(value);

        return ();
    }


    throw (1001);
}

;; =============== getters =============================

(int) get_feed_value() method_id {
    int value = load_data();

    return value;
}