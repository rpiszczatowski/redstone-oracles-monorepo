use array::ArrayTrait;

const SAMPLE_BLOCK_TIMESTAMP: u64 = 1692186524_u64;

fn sample_payload_bytes() -> Array<u8> {
    let mut arr: Array<u8> = Default::default();
    arr.append(0x45_u8);
    arr.append(0x54_u8);
    arr.append(0x48_u8);
    arr.append(0x00_u8);
    arr.append(0x00_u8);
    arr.append(0x00_u8);
    arr.append(0x00_u8);
    arr.append(0x00_u8);
    arr.append(0x00_u8);
    arr.append(0x00_u8);
    arr.append(0x00_u8);
    arr.append(0x00_u8);
    arr.append(0x00_u8);
    arr.append(0x00_u8);
    arr.append(0x00_u8);
    arr.append(0x00_u8);
    arr.append(0x00_u8);
    arr.append(0x00_u8);
    arr.append(0x00_u8);
    arr.append(0x00_u8);
    arr.append(0x00_u8);
    arr.append(0x00_u8);
    arr.append(0x00_u8);
    arr.append(0x00_u8);
    arr.append(0x00_u8);
    arr.append(0x00_u8);
    arr.append(0x00_u8);
    arr.append(0x00_u8);
    arr.append(0x00_u8);
    arr.append(0x00_u8);
    arr.append(0x00_u8);
    arr.append(0x00_u8);
    arr.append(0x00_u8);
    arr.append(0x00_u8);
    arr.append(0x00_u8);
    arr.append(0x00_u8);
    arr.append(0x00_u8);
    arr.append(0x00_u8);
    arr.append(0x00_u8);
    arr.append(0x00_u8);
    arr.append(0x00_u8);
    arr.append(0x00_u8);
    arr.append(0x00_u8);
    arr.append(0x00_u8);
    arr.append(0x00_u8);
    arr.append(0x00_u8);
    arr.append(0x00_u8);
    arr.append(0x00_u8);
    arr.append(0x00_u8);
    arr.append(0x00_u8);
    arr.append(0x00_u8);
    arr.append(0x00_u8);
    arr.append(0x00_u8);
    arr.append(0x00_u8);
    arr.append(0x00_u8);
    arr.append(0x00_u8);
    arr.append(0x00_u8);
    arr.append(0x00_u8);
    arr.append(0x00_u8);
    arr.append(0x2a_u8);
    arr.append(0x6b_u8);
    arr.append(0x7f_u8);
    arr.append(0x35_u8);
    arr.append(0xa1_u8);
    arr.append(0x01_u8);
    arr.append(0x89_u8);
    arr.append(0xfe_u8);
    arr.append(0x2d_u8);
    arr.append(0x02_u8);
    arr.append(0xb0_u8);
    arr.append(0x00_u8);
    arr.append(0x00_u8);
    arr.append(0x00_u8);
    arr.append(0x20_u8);
    arr.append(0x00_u8);
    arr.append(0x00_u8);
    arr.append(0x01_u8);
    arr.append(0x26_u8);
    arr.append(0xe0_u8);
    arr.append(0x1d_u8);
    arr.append(0x65_u8);
    arr.append(0xf2_u8);
    arr.append(0x24_u8);
    arr.append(0xfb_u8);
    arr.append(0x53_u8);
    arr.append(0xe3_u8);
    arr.append(0x86_u8);
    arr.append(0xc7_u8);
    arr.append(0x5b_u8);
    arr.append(0x86_u8);
    arr.append(0xc1_u8);
    arr.append(0x4f_u8);
    arr.append(0x6a_u8);
    arr.append(0x57_u8);
    arr.append(0xbe_u8);
    arr.append(0x65_u8);
    arr.append(0x17_u8);
    arr.append(0x22_u8);
    arr.append(0xef_u8);
    arr.append(0xb3_u8);
    arr.append(0xae_u8);
    arr.append(0x56_u8);
    arr.append(0xf5_u8);
    arr.append(0x8f_u8);
    arr.append(0x23_u8);
    arr.append(0x03_u8);
    arr.append(0xa9_u8);
    arr.append(0x0f_u8);
    arr.append(0x5b_u8);
    arr.append(0x2f_u8);
    arr.append(0x0a_u8);
    arr.append(0xea_u8);
    arr.append(0xf9_u8);
    arr.append(0x1b_u8);
    arr.append(0x05_u8);
    arr.append(0x31_u8);
    arr.append(0x1b_u8);
    arr.append(0xf8_u8);
    arr.append(0x96_u8);
    arr.append(0x20_u8);
    arr.append(0xb2_u8);
    arr.append(0x6e_u8);
    arr.append(0xe5_u8);
    arr.append(0xed_u8);
    arr.append(0x5b_u8);
    arr.append(0x15_u8);
    arr.append(0x93_u8);
    arr.append(0xbd_u8);
    arr.append(0x79_u8);
    arr.append(0xa0_u8);
    arr.append(0x71_u8);
    arr.append(0x26_u8);
    arr.append(0xda_u8);
    arr.append(0x45_u8);
    arr.append(0xcf_u8);
    arr.append(0x23_u8);
    arr.append(0x00_u8);
    arr.append(0xb1_u8);
    arr.append(0x24_u8);
    arr.append(0xcb_u8);
    arr.append(0x25_u8);
    arr.append(0x1b_u8);
    arr.append(0x00_u8);
    arr.append(0x01_u8);
    arr.append(0x00_u8);
    arr.append(0x00_u8);
    arr.append(0x00_u8);
    arr.append(0x00_u8);
    arr.append(0x00_u8);
    arr.append(0x02_u8);
    arr.append(0xed_u8);
    arr.append(0x57_u8);
    arr.append(0x01_u8);
    arr.append(0x1e_u8);
    arr.append(0x00_u8);
    arr.append(0x00_u8);
    arr
}

